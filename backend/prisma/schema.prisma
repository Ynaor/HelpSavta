// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-arm64-openssl-1.1.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Technical assistance requests from elderly users
model TechRequest {
  id                  Int       @id @default(autoincrement())
  full_name          String    // שם מלא של המבקש
  phone              String    // מספר טלפון
  email              String    // כתובת דוא"ל
  address            String    // כתובת מלאה
  problem_description String   // תיאור הבעיה הטכנית
  urgency_level      String    @default("medium") // רמת דחיפות: low, medium, high, urgent
  scheduled_date     String?   // תאריך מתוכנן לביקור
  scheduled_time     String?   // שעת ביקור מתוכננת
  status             String    @default("pending") // סטטוס: pending, in_progress, completed, cancelled
  notes              String?   // הערות נוספות
  assigned_admin_id  Int?      // מזהה המנהל שמטפל בבקשה
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  
  // Relation to booked slot
  booked_slot        AvailableSlot?  @relation(fields: [booked_slot_id], references: [id])
  booked_slot_id     Int?

  // Relation to assigned admin
  assigned_admin     AdminUser?      @relation(fields: [assigned_admin_id], references: [id])

  @@map("tech_requests")
}

// Available time slots for volunteers
model AvailableSlot {
  id                 Int       @id @default(autoincrement())
  date               String    // תאריך זמין (YYYY-MM-DD format)
  start_time         String    // שעת התחלה (HH:MM format)
  end_time           String    // שעת סיום (HH:MM format)
  is_booked          Boolean   @default(false) // האם השעה תפוסה
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  
  // Relation to tech requests
  tech_requests      TechRequest[]

  @@map("available_slots")
}

// Admin users for system management
model AdminUser {
  id              Int        @id @default(autoincrement())
  username        String     @unique // שם משתמש ייחודי
  password_hash   String     // סיסמה מוצפנת
  role            String     @default("VOLUNTEER") // תפקיד המנהל: SYSTEM_ADMIN, VOLUNTEER
  created_by_id   Int?       // מי יצר את המנהל הזה
  is_active       Boolean    @default(true) // האם המנהל פעיל
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  // Self-referential relation for admin creation tracking
  created_by      AdminUser?  @relation("AdminCreatedBy", fields: [created_by_id], references: [id])
  created_admins  AdminUser[] @relation("AdminCreatedBy")

  // Relation to assigned requests
  assigned_requests TechRequest[]

  @@map("admin_users")
}

// Log of notifications sent (SMS, email, etc.)
model NotificationLog {
  id        Int      @id @default(autoincrement())
  type      String   // סוג התראה: sms, email, whatsapp
  recipient String   // נמען ההתראה
  message   String   // תוכן ההודעה
  sent_at   DateTime @default(now())
  status    String   @default("pending") // סטטוס שליחה: pending, sent, failed

  @@map("notification_logs")
}