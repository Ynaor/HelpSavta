import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcryptjs';
import * as dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const prisma = new PrismaClient();

// Define slot data type
interface SlotData {
  date: string;
  start_time: string;
  end_time: string;
  is_booked: boolean;
}

async function main() {
  console.log('üå± Starting database seeding...');

  // Create default admin user
  const defaultAdminUsername = process.env.DEFAULT_ADMIN_USERNAME;
  const defaultAdminPassword = process.env.DEFAULT_ADMIN_PASSWORD;

  // Check if admin already exists
  const existingAdmin = await prisma.adminUser.findUnique({
    where: { username: defaultAdminUsername }
  });

  if (!existingAdmin) {
    const saltRounds = 12;
    const password_hash = await bcrypt.hash(defaultAdminPassword, saltRounds);

    const admin = await prisma.adminUser.create({
      data: {
        username: defaultAdminUsername,
        password_hash
      }
    });

    console.log(`‚úÖ Created admin user: ${admin.username}`);
  } else {
    console.log(`‚ÑπÔ∏è  Admin user already exists: ${existingAdmin.username}`);
  }

  // Create some sample available slots for the next 7 days
  const today = new Date();
  const slots: SlotData[] = [];

  for (let i = 1; i <= 7; i++) {
    const date = new Date(today);
    date.setDate(today.getDate() + i);
    const dateString = date.toISOString().split('T')[0];

    // Morning slots
    slots.push({
      date: dateString as string,
      start_time: '09:00',
      end_time: '12:00',
      is_booked: false
    });

    // Afternoon slots
    slots.push({
      date: dateString as string,
      start_time: '14:00',
      end_time: '17:00',
      is_booked: false
    });
  }

  // Create slots if they don't exist
  for (const slotData of slots) {
    const existingSlot = await prisma.availableSlot.findFirst({
      where: {
        date: slotData.date,
        start_time: slotData.start_time,
        end_time: slotData.end_time
      }
    });

    if (!existingSlot) {
      await prisma.availableSlot.create({
        data: slotData
      });
      console.log(`‚úÖ Created slot: ${slotData.date} ${slotData.start_time}-${slotData.end_time}`);
    }
  }

  // Create sample tech requests with email addresses
  const sampleRequests = [
    {
      full_name: "◊®◊ó◊ú ◊õ◊î◊ü",
      phone: "02-5551234",
      email: "rachel.cohen@gmail.com",
      address: "◊®◊ó◊ï◊ë ◊î◊®◊¶◊ú 15, ◊ô◊®◊ï◊©◊ú◊ô◊ù",
      problem_description: "◊î◊û◊ó◊©◊ë ◊ú◊ê ◊†◊ì◊ú◊ß ◊ë◊õ◊ú◊ú. ◊ú◊ó◊¶◊™◊ô ◊¢◊ú ◊î◊õ◊§◊™◊ï◊® ◊ê◊ë◊ú ◊©◊ï◊ù ◊ì◊ë◊® ◊ú◊ê ◊ß◊ï◊®◊î.",
      urgency_level: "high"
    },
    {
      full_name: "◊û◊©◊î ◊ú◊ï◊ô",
      phone: "03-5555678",
      email: "moshe.levi@walla.co.il",
      address: "◊©◊ì◊®◊ï◊™ ◊ú◊ú◊ê 32, ◊™◊ú ◊ê◊ë◊ô◊ë",
      problem_description: "◊î◊ò◊ú◊§◊ï◊ü ◊î◊ó◊õ◊ù ◊©◊ú◊ô ◊ú◊ê ◊û◊™◊ó◊ë◊® ◊ú◊ê◊ô◊†◊ò◊®◊†◊ò. ◊¶◊®◊ô◊ö ◊¢◊ñ◊®◊î ◊¢◊ù ◊î-WiFi.",
      urgency_level: "medium"
    },
    {
      full_name: "◊©◊®◊î ◊í◊ï◊ú◊ì◊ë◊®◊í",
      phone: "04-5559876",
      email: "sarah.goldberg@hotmail.com",
      address: "◊®◊ó◊ï◊ë ◊î◊í◊ú◊ô◊ú 8, ◊ó◊ô◊§◊î",
      problem_description: "◊ê◊†◊ô ◊ú◊ê ◊ô◊ï◊ì◊¢◊™ ◊ê◊ô◊ö ◊ú◊î◊ì◊§◊ô◊° ◊û◊î◊û◊ó◊©◊ë. ◊î◊û◊ì◊§◊°◊™ ◊û◊ó◊ï◊ë◊®◊™ ◊ê◊ë◊ú ◊ú◊ê ◊¢◊ï◊ë◊ì◊™.",
      urgency_level: "low"
    }
  ];

  // Create sample requests if they don't exist
  for (const requestData of sampleRequests) {
    const existingRequest = await prisma.techRequest.findFirst({
      where: {
        full_name: requestData.full_name,
        phone: requestData.phone
      }
    });

    if (!existingRequest) {
      await prisma.techRequest.create({
        data: requestData
      });
      console.log(`‚úÖ Created sample request for: ${requestData.full_name}`);
    }
  }

  console.log('üéâ Database seeding completed!');
}

main()
  .catch((e) => {
    console.error('‚ùå Error during seeding:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });