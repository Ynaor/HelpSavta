name: Test Suite - Comprehensive Testing

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        default: '18'
        type: string
      run-integration-tests:
        description: 'Run integration tests'
        required: false
        default: true
        type: boolean
  workflow_dispatch:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        default: '18'
        type: choice
        options:
        - '18'
        - '20'
      run-integration-tests:
        description: 'Run integration tests'
        required: false
        default: true
        type: boolean
      test-type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
        - 'all'
        - 'backend-only'
        - 'frontend-only'
        - 'integration-only'

env:
  NODE_VERSION: ${{ inputs.node-version || '18' }}

jobs:
  # Backend Unit Tests
  backend-tests:
    name: Backend Unit & Integration Tests
    runs-on: ubuntu-latest
    if: inputs.test-type == 'all' || inputs.test-type == 'backend-only' || github.event_name == 'workflow_call'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "JWT_SECRET=test-secret-key" >> .env.test
        echo "SESSION_SECRET=test-session-secret" >> .env.test

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

    - name: Run backend tests
      run: npm run test
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

    - name: Run backend tests with coverage
      run: npm run test:coverage
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

    - name: Upload backend test coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Build backend for testing
      run: npm run build

    - name: Test backend startup
      run: |
        npm start &
        BACKEND_PID=$!
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:3001/health || exit 1
        
        # Test basic API endpoints
        curl -f http://localhost:3001/api/test || echo "Test endpoint not available"
        
        # Cleanup
        kill $BACKEND_PID || true
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

  # Frontend Unit Tests
  frontend-tests:
    name: Frontend Unit & Component Tests
    runs-on: ubuntu-latest
    if: inputs.test-type == 'all' || inputs.test-type == 'frontend-only' || github.event_name == 'workflow_call'

    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run frontend tests
      run: npm run test:run

    - name: Run frontend tests with coverage
      run: npm run test:coverage

    - name: Upload frontend test coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

    - name: Build frontend for testing
      run: npm run build

    - name: Verify build output
      run: |
        if [ ! -d "dist" ]; then
          echo "❌ Build failed - dist directory not found"
          exit 1
        fi
        if [ ! -f "dist/index.html" ]; then
          echo "❌ Build failed - index.html not found"
          exit 1
        fi
        
        # Check for essential assets
        if [ ! -d "dist/assets" ]; then
          echo "⚠️ Warning - assets directory not found"
        fi
        
        echo "✅ Frontend build successful"
        echo "📊 Build size:"
        du -sh dist/
        echo "📁 Build contents:"
        ls -la dist/

  # Integration Tests
  integration-tests:
    name: End-to-End Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: (inputs.run-integration-tests != false) && (inputs.test-type == 'all' || inputs.test-type == 'integration-only' || github.event_name == 'workflow_call')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: helpsavta_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install root dependencies
      run: npm ci

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Setup integration test environment
      run: |
        # Copy backend environment
        cp backend/.env.example backend/.env
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/helpsavta_test" >> backend/.env
        echo "NODE_ENV=test" >> backend/.env
        echo "JWT_SECRET=integration-test-secret" >> backend/.env
        echo "SESSION_SECRET=integration-test-session" >> backend/.env
        echo "PORT=3001" >> backend/.env

    - name: Setup database for integration tests
      working-directory: ./backend
      run: |
        npx prisma generate
        npx prisma migrate deploy
        npx prisma db seed
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/helpsavta_test

    - name: Build applications
      run: |
        npm run build:backend
        npm run build:frontend

    - name: Start backend server
      run: |
        cd backend
        npm start &
        echo $! > ../backend.pid
        sleep 10

    - name: Start frontend server
      run: |
        cd frontend
        npm run preview &
        echo $! > ../frontend.pid
        sleep 5

    - name: Wait for services to be ready
      run: |
        # Wait for backend
        timeout 30s bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
        echo "✅ Backend is ready"
        
        # Wait for frontend
        timeout 30s bash -c 'until curl -f http://localhost:4173; do sleep 2; done'
        echo "✅ Frontend is ready"

    - name: Run smoke tests
      run: |
        chmod +x scripts/smoke-tests.sh
        ./scripts/smoke-tests.sh http://localhost:4173

    - name: Run integration test suite
      run: |
        # Test API endpoints
        echo "Testing API endpoints..."
        
        # Test health endpoint
        curl -f http://localhost:3001/health
        
        # Test CORS headers
        curl -H "Origin: http://localhost:4173" \
             -H "Access-Control-Request-Method: GET" \
             -H "Access-Control-Request-Headers: X-Requested-With" \
             -X OPTIONS \
             http://localhost:3001/api/test
        
        # Test basic frontend routes
        echo "Testing frontend routes..."
        curl -f http://localhost:4173/
        curl -f http://localhost:4173/request-help || echo "Route may require authentication"
        
        echo "✅ Integration tests completed successfully"

    - name: Cleanup processes
      if: always()
      run: |
        # Kill backend and frontend processes
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
          rm backend.pid
        fi
        if [ -f frontend.pid ]; then
          kill $(cat frontend.pid) || true
          rm frontend.pid
        fi
        
        # Cleanup any remaining processes
        pkill -f "node dist/server.js" || true
        pkill -f "vite preview" || true

  # Performance Tests
  performance-tests:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: inputs.test-type == 'all' || github.event_name == 'workflow_call'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Lighthouse CLI
      run: npm install -g @lhci/cli

    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build

    - name: Start frontend for performance testing
      working-directory: ./frontend
      run: |
        npm run preview &
        echo $! > ../perf-frontend.pid
        sleep 5

    - name: Run Lighthouse audit
      run: |
        # Wait for frontend to be ready
        timeout 30s bash -c 'until curl -f http://localhost:4173; do sleep 2; done'
        
        # Run Lighthouse audit
        lhci autorun --upload.target=temporary-public-storage --collect.url=http://localhost:4173 || echo "Lighthouse audit completed with warnings"

    - name: Cleanup performance test
      if: always()
      run: |
        if [ -f perf-frontend.pid ]; then
          kill $(cat perf-frontend.pid) || true
          rm perf-frontend.pid
        fi

  # Test Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, performance-tests]
    if: always()

    steps:
    - name: Generate test summary
      run: |
        echo "# 📋 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance Tests | ${{ needs.performance-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.backend-tests.result }}" == "success" && "${{ needs.frontend-tests.result }}" == "success" ]]; then
          echo "## 🎉 All core tests passed!" >> $GITHUB_STEP_SUMMARY
          echo "The application is ready for deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Some tests failed" >> $GITHUB_STEP_SUMMARY
          echo "Please review the failed tests before proceeding." >> $GITHUB_STEP_SUMMARY
        fi