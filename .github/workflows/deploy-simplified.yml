name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  packages: write

env:
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Build and Test (same as PR validation)
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Lint frontend
        working-directory: frontend
        run: npm run lint

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test:run

      - name: Build frontend for production
        working-directory: frontend
        run: npm run build

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: backend
        run: npx prisma generate

      - name: Build backend
        working-directory: backend
        run: npm run build

      - name: Run backend tests
        working-directory: backend
        run: npm run test

      # Create deployment artifacts
      - name: Create frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/dist/
          retention-days: 30

      - name: Create backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: |
            backend/dist/
            backend/package*.json
            backend/prisma/
            Dockerfile
          retention-days: 30

      # Deploy Frontend to Azure Static Web Apps
      - name: Deploy Frontend to Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "frontend"
          output_location: "dist"

      # Build and Deploy Backend to Container Apps
      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.AZURE_CONTAINER_REGISTRY }}/helpsavta-backend:${{ github.sha }} .
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}/helpsavta-backend:${{ github.sha }}

      - name: Deploy to Azure Container Apps
        run: |
          # Update container app with new image
          az containerapp update \
            --name helpsavta-production-backend \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --image ${{ secrets.AZURE_CONTAINER_REGISTRY }}/helpsavta-backend:${{ github.sha }} \
            --set-env-vars \
              NODE_ENV=production \
              PORT=3001 \
              DATABASE_URL="${{ secrets.DATABASE_URL_PRODUCTION }}" \
              SENDGRID_API_KEY="${{ secrets.SENDGRID_API_KEY }}" \
              SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
              DEFAULT_ADMIN_USERNAME="${{ secrets.ADMIN_USERNAME }}" \
              DEFAULT_ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}" \
              EMAIL_FROM="${{ secrets.EMAIL_FROM }}" \
              EMAIL_FROM_NAME="Help Savta" \
              EMAIL_REPLY_TO="support@helpsavta.com" \
              SUPPORT_EMAIL="support@helpsavta.com"

      # Run database migrations
      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PRODUCTION }}
        run: |
          cd backend
          npx prisma migrate deploy

      # Health check
      - name: Health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            if curl -f --max-time 30 https://helpsavta-production-backend.thankfulwave-1e59625f.westeurope.azurecontainerapps.io/health; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚ùå Health check failed, retrying in 30 seconds..."
              if [ $attempt -eq $max_attempts ]; then
                echo "‚ùå Health check failed after $max_attempts attempts"
                exit 1
              fi
              sleep 30
              attempt=$((attempt + 1))
            fi
          done

      - name: Deployment Success
        if: success()
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "Frontend: Azure Static Web Apps"
          echo "Backend: Azure Container Apps"
          echo "Deployment SHA: ${{ github.sha }}"
          echo "Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

      - name: Deployment Failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Failed SHA: ${{ github.sha }}"
          echo "Failed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          exit 1