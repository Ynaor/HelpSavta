name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  # Use the comprehensive test suite
  run-tests:
    name: Comprehensive Test Suite
    uses: ./.github/workflows/test.yml
    with:
      node-version: ${{ env.NODE_VERSION }}
      run-integration-tests: true

  # Linting and Code Quality
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: ['backend', 'frontend']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.component }}/package-lock.json

    - name: Install dependencies
      working-directory: ${{ matrix.component }}
      run: npm ci

    - name: Run linting
      working-directory: ${{ matrix.component }}
      run: npm run lint || echo "Linting completed with warnings"
      
    - name: Check code formatting (Backend)
      if: matrix.component == 'backend'
      working-directory: backend
      run: |
        echo "Checking TypeScript compilation..."
        npx tsc --noEmit

    - name: Check code formatting (Frontend)
      if: matrix.component == 'frontend'
      working-directory: frontend
      run: |
        echo "Checking TypeScript compilation..."
        npx tsc --noEmit

  # Docker Build Tests
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [run-tests, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: helpsavta-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: helpsavta-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker containers
      run: |
        # Start containers
        docker run -d --name backend-test -p 3001:3001 helpsavta-backend:test
        docker run -d --name frontend-test -p 8080:80 helpsavta-frontend:test
        
        # Wait for containers to start
        sleep 15
        
        # Test backend health
        curl -f http://localhost:3001/health || (echo "Backend health check failed" && exit 1)
        
        # Test frontend
        curl -f http://localhost:8080 || (echo "Frontend health check failed" && exit 1)
        
        # Cleanup
        docker stop backend-test frontend-test
        docker rm backend-test frontend-test

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Smoke Tests (Docker-based)
  smoke-test:
    name: Docker Smoke Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Start application with Docker Compose
      run: |
        cp backend/.env.example backend/.env
        echo "NODE_ENV=production" >> backend/.env
        echo "DATABASE_URL=file:./dev.db" >> backend/.env
        docker-compose up -d
        sleep 45

    - name: Wait for services to be ready
      run: |
        echo "Waiting for backend to be ready..."
        timeout 60s bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
        echo "✅ Backend is ready"
        
        echo "Waiting for frontend to be ready..."
        timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        echo "✅ Frontend is ready"

    - name: Run smoke tests
      run: |
        chmod +x scripts/smoke-tests.sh
        ./scripts/smoke-tests.sh http://localhost:3000

    - name: Test API endpoints
      run: |
        echo "Testing API endpoints..."
        curl -f http://localhost:3001/health
        curl -f http://localhost:3001/api/test || echo "Test endpoint may not exist"

    - name: Cleanup
      if: always()
      run: |
        echo "Cleaning up containers..."
        docker-compose logs
        docker-compose down -v

  # Summary
  ci-summary:
    name: CI Pipeline Summary
    runs-on: ubuntu-latest
    needs: [run-tests, code-quality, docker-build, smoke-test, security-scan]
    if: always()
    
    steps:
    - name: Generate CI Summary
      run: |
        echo "# 🚀 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ needs.run-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Smoke Tests | ${{ needs.smoke-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.run-tests.result }}" == "success" && "${{ needs.code-quality.result }}" == "success" && "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "## 🎉 All checks passed! Ready for merge." >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Some checks failed. Please review before merging." >> $GITHUB_STEP_SUMMARY
        fi