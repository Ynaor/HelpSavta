name: CI - Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env.test
        echo "NODE_ENV=test" >> .env.test

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

    - name: Build backend
      run: npm run build

    - name: Run email service tests
      run: npm run test:email-simple
      continue-on-error: true

    - name: Test backend health
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:3001/health || exit 1
        pkill -f "node dist/server.js"

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Build frontend
      run: npm run build

    - name: Test build output
      run: |
        if [ ! -d "dist" ]; then
          echo "Build failed - dist directory not found"
          exit 1
        fi
        if [ ! -f "dist/index.html" ]; then
          echo "Build failed - index.html not found"
          exit 1
        fi
        echo "Frontend build successful"

  # Docker Build Tests
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: helpsavta-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: helpsavta-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker containers
      run: |
        # Start containers
        docker run -d --name backend-test -p 3001:3001 helpsavta-backend:test
        docker run -d --name frontend-test -p 8080:80 helpsavta-frontend:test
        
        # Wait for containers to start
        sleep 15
        
        # Test backend health
        curl -f http://localhost:3001/health || (echo "Backend health check failed" && exit 1)
        
        # Test frontend
        curl -f http://localhost:8080 || (echo "Frontend health check failed" && exit 1)
        
        # Cleanup
        docker stop backend-test frontend-test
        docker rm backend-test frontend-test

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Start application with Docker Compose
      run: |
        cp backend/.env.example backend/.env
        docker-compose up -d
        sleep 30

    - name: Run smoke tests
      run: |
        chmod +x scripts/smoke-tests.sh
        ./scripts/smoke-tests.sh http://localhost:3000

    - name: Cleanup
      if: always()
      run: docker-compose down -v