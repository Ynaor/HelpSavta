name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write

env:
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Wait for CI to complete and get the run ID
      - name: Wait for CI completion and get artifacts
        id: ci-run
        run: |
          echo "Waiting for CI to complete..."
          max_attempts=20
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Looking for CI run..."
            
            # Get CI runs for current commit
            CI_RUNS=$(gh run list --workflow=ci.yml --commit=${{ github.sha }} --json databaseId,status,conclusion 2>/dev/null || echo "[]")
            echo "CI runs found: $CI_RUNS"
            
            # Check for completed successful run
            CI_RUN_ID=$(echo "$CI_RUNS" | jq -r '.[] | select(.status=="completed" and .conclusion=="success") | .databaseId' | head -1)
            
            if [ "$CI_RUN_ID" != "null" ] && [ ! -z "$CI_RUN_ID" ]; then
              echo "‚úÖ Found completed CI run: $CI_RUN_ID"
              echo "ci_run_id=$CI_RUN_ID" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "No completed CI run yet, waiting 15 seconds..."
            sleep 15
            attempt=$((attempt + 1))
          done
          
          echo "‚ùå No completed CI run found after $max_attempts attempts"
          echo "Available runs:"
          gh run list --workflow=ci.yml --limit=5
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          run-id: ${{ steps.ci-run.outputs.ci_run_id }}

      - name: Download backend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/
          run-id: ${{ steps.ci-run.outputs.ci_run_id }}

      - name: Download Docker context
        uses: actions/download-artifact@v4
        with:
          name: docker-context
          path: ./
          run-id: ${{ steps.ci-run.outputs.ci_run_id }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Verify artifacts exist
      - name: Verify build artifacts
        run: |
          echo "Checking frontend build artifacts..."
          ls -la frontend/dist/
          echo "Checking backend build artifacts..."
          ls -la backend/dist/
          echo "Checking Docker context..."
          ls -la ./

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.AZURE_CONTAINER_REGISTRY }}/helpsavta-backend:${{ github.sha }}
            ${{ secrets.AZURE_CONTAINER_REGISTRY }}/helpsavta-backend:latest

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: helpsavta-production-backend
          slot-name: production
          images: ${{ secrets.AZURE_CONTAINER_REGISTRY }}/helpsavta-backend:${{ github.sha }}

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_PRODUCTION }}
        run: |
          cd backend
          # Ensure Prisma client is available
          npm install @prisma/client prisma
          npx prisma generate
          npx prisma migrate deploy

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 60

      - name: Health check
        run: |
          echo "Running health check..."
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            if curl -f --max-time 30 ${{ secrets.AZURE_APP_URL_PRODUCTION }}/health; then
              echo "‚úÖ Health check passed!"
              break
            else
              echo "‚ùå Health check failed, retrying in 30 seconds..."
              if [ $attempt -eq $max_attempts ]; then
                echo "‚ùå Health check failed after $max_attempts attempts"
                exit 1
              fi
              sleep 30
              attempt=$((attempt + 1))
            fi
          done

      - name: Verify deployment
        run: |
          echo "Verifying deployment endpoints..."
          
          # Test API endpoints
          echo "Testing API health endpoint..."
          curl -f ${{ secrets.AZURE_APP_URL_PRODUCTION }}/health
          
          echo "Testing API test endpoint..."
          curl -f ${{ secrets.AZURE_APP_URL_PRODUCTION }}/api/test
          
          echo "‚úÖ Deployment verification completed successfully!"

      - name: Cleanup old container images
        if: success()
        run: |
          echo "Cleaning up old container images..."
          # Keep only the 10 most recent images
          az acr repository show-tags \
            --name ${{ secrets.AZURE_CONTAINER_REGISTRY }} \
            --repository helpsavta-backend \
            --orderby time_desc \
            --output tsv | \
            tail -n +11 | \
            xargs -I {} az acr repository delete \
              --name ${{ secrets.AZURE_CONTAINER_REGISTRY }} \
              --image helpsavta-backend:{} \
              --yes || true

      - name: Deployment success notification
        if: success()
        run: |
          echo "üöÄ Deployment to production completed successfully!"
          echo "Application URL: ${{ secrets.AZURE_APP_URL_PRODUCTION }}"
          echo "Deployment SHA: ${{ github.sha }}"
          echo "Deployed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

      - name: Deployment failure notification
        if: failure()
        run: |
          echo "‚ùå Deployment to production failed!"
          echo "Please check the logs and try again."
          echo "Failed SHA: ${{ github.sha }}"
          echo "Failed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          exit 1